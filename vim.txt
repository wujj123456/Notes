vim

/* split evenly */
^w, =

/* go to next char */
t<x>: move cursor before next char
f<x>: move cursor onto next char
Use ; to repeat the jump
Use , to go in opposite direction

/* avoid indention when pasting */
set paste
set nopaste

/* gvim change home dir */
:echo $VIM
change $VIM/vimrc to do:
let $HOME = $USERPROFILE

/* vimdiff go to next/prev change */
]c
[c

/* find a file in path */
https://stackoverflow.com/questions/3554719/find-a-file-via-recursive-directory-search-in-vim
:f <filename>

/* auto reload after files changed */
set autoread

/* open file auto completion */
Use :e instead of :open
set wildmode=longest,list,full
set wildmenu

/* change vimdiff color scheme */
if &diff
    colorscheme evening
endif

/* auto complete */
^x, ^f: filename
^x, ^d: macro
^x, ^]: tag
^x, ^i: keyword with filename
^x, ^v: statement
^x, ^l: line

/* tab view */
:Te <file>
gt: next tab
gT: previous tab
<n>gt: go to tab n
vim -p <files>

/* open current directory */
:E

/* repeat previous command */
.

/* man page */
K

/* change case */
~: change current char
U: change all selected text to upper case

/* incremental search */
set incsearch

/* jump block */
%

/* combine two lines */
J

/* select */
V: select entire line
v: select from here

/* format text for text width */
set textwidth=80
set colorcolumn=81 (need vim 7.3+)
gq
gq%: format entire block

/* run command based on filetype */
autocmd FileType gitcommit set tw=75

/* execute command in all windows */
http://vim.wikia.com/wiki/Run_a_command_in_multiple_buffers
:windo set scrollbind

/* change font size */
decrease: ^p, -
increase: ^p, 0

/* quit with error code */
:cq

/* use local .vimrc files */
set exrc

/* prevent .vimrc hacks */
http://vim.runpaint.org/basics/configuring-vim/
set secure

/* quit all windows */
:qa

/* argument alignment across multiple lines should match the open parenthesis */
cinoptions=(0

/* search and replace */
http://vim.wikia.com/wiki/Search_and_replace
When search, \n is newline
When replace, \r is newline

/* move cursor in insert mode */
Alt+<whatever>

/* delete current word (including space) */
dw

/* delete current word and go to insert */
ciw: change inner word
caw: change a word (including space)

/* delete until */
dt<space>: delete until space
dtx: delete until x

/* read from stdin */
vim -

/* navigate in current screen */
H: first line of screen
M: middle line of screen
L: last line of screen

/* fold/unfold code */
"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=5         "this is just what i use

za: fold/unfold
zR: unfold all
zM: fold all

/* word/WORD navigation */
w/W: go to next word/WORD
b/B: go to previous word/WORD
e/E: move to the end of the word/WORD
word: consecutive letters, numbers and underscore
WORD: delimit by whitespaces

/* navigate in blocks */
[m, ]m
[{, ]}
[(, ])
[[: previous {
]]: next {
[]: previous }
][: next }
{, }: previous, next blank line

/* navigate in nested #ifdef */
[#, ]#

/* open multiple files split */
vim -o file1 file2  -- horizontal split
vim -O file1 file2  -- vertical split

/* buffer jump */
^O, ^I

/* start read-only */
view

/* keep displaying filenames */
set ls=2

/* enable line number */
set nu

/* disable line number */
set nonu

/* show ^M, fix newline */
:set fileformat=unix

/* color control */
https://www.linux.com/learn/tutorials/540255:weekend-project-take-control-of-vims-color-scheme

/* reference card */
http://insenvim.sourceforge.net/VimReferenceCard.pdf

/* .vimrc */
set cindent
set ts=4
set hlsearch
set diffopt+=iwhite

/* reload file */
:e
:windo e

/* split */
^w, v
^w, s
^w, w

/* tabs */
:tabe
:tabn
:tabp
gt

/* copy multiple lines */
http://vim.wikia.com/wiki/Cut_or_copy_lines_without_counting_the_lines
mk - mark beginning line
y'k - yank until end line

/* navigate */
j - move up one line
k - move down one line

/* compare files */
vim -d
/* ignore whitespace */
:set diffopt+=iwhite

/* location jump */
Press ^O to jump back to the previous location.
Press ^I (or TAB) to jump forward to the next location. 

/* scroll together */
:set scrollbind (type in both windows)
:set scb

/* delete till the end of line */
D

/* exit insert mode */
^[

/* change tab title line */
http://www.theworldofstuff.com/linux/vimrc.txt
" custom tab pages line with tab numbers - modified version of script by JonSkanes
" http://vim.wikia.com/index.php?title=Show_tab_number_in_your_tab_line&oldid=29439
set tabline=%!MyTabLine()

function MyTabLine()
	let s = '' " complete tabline goes here
	" loop through each tab page
	for t in range(tabpagenr('$'))
		" select the highlighting for the buffer names
		if t + 1 == tabpagenr()
			let s .= '%#TabLineSel#'
		else
			let s .= '%#TabLine#'
		endif
		let s .= ' ['
		" set the tab page number (for mouse clicks)
		let s .= '%' . (t + 1) . 'T'
		" set page number string
		let s .=  t + 1 . ']' 
		" get buffer names and statuses
		let n = ''  "temp string for buffer names while we loop and check buftype
		let m = 0	" &modified counter
		let bc = len(tabpagebuflist(t + 1))  "counter to avoid last ','
		" loop through each buffer in a tab
		for b in tabpagebuflist(t + 1)
			" buffer types: quickfix gets a [Q], help gets [H]{base fname}
			if getbufvar( b, "&buftype" ) == 'help'
				let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
			elseif getbufvar( b, "&buftype" ) == 'quickfix'	
				let n .= '[Q]'
			elseif bufname(b) == ''
				let n .= '[No Name]'
			else
				"let n .= pathshorten(bufname(b))
				"let n .= bufname(b)
				let n .= fnamemodify( bufname(b), ':t' )
			endif
			" check and ++ tab's &modified count
			if getbufvar( b, "&modified" )
				let m += 1
			endif
			" no final ' ' added...formatting looks better done later
			if bc > 1
				let n .= ','
			endif
			let bc -= 1
		endfor
		" add modified label [+] where n pages in tab are modified
		if m > 0
			"let s .= '[' . m . '+]'
			let s.= '[+]'
		endif
		let s .= ' '
		" add buffer names
		let s .= n
		" switch to no underlining and add final space to buffer list
		"let s .= '%#TabLineSel#' . ' '
		let s .= ' '
	endfor
	" after the last tab fill with TabLineFill and reset tab page nr
	let s .= '%#TabLineFill#%T'
	return s
endfunction

